@page "/"
@using System.Threading.Tasks
@using cryptovalutchik.Components.Blocks;
@using cryptovalutchik.Components.Types;
@inject HttpClient client;
<PageTitle>Cryptovalutchik</PageTitle>
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crypto Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link rel="stylesheet" href="../Components/Pages/Home.razor.css" />
</head>

<body>
    <div class="container">
        <TickerFilter Tickers="tickers" OnAddTicker="OnAddTicker"/>
        <CryptoList Cryptocurrencies="cryptocurrencies" OnRemoveCrypto="OnRemoveTicker" OnCryptoWithIdSelected="@(id => selectedTicker = id)" SelectedTicker="selectedTicker" />
        <CryptoChart Values="data"/>
    </div>
</body>
</html>

@code{
    private string[] tickers=[];
    private List<string> userTicker = [];
    private Cryptocurrency[] cryptocurrencies=[];
    private Timer? _timer;
    private Guid? selectedTicker = null;
    private double[] data = [];
    protected override async Task OnInitializedAsync()
    {
        tickers = await client.GetFromJsonAsync<string[]>("/cryptocurrency/tickers");
        _timer = new Timer(async _ =>
            {
                await LoadDataAsync();
                await InvokeAsync(StateHasChanged);
            },
            null,
            TimeSpan.FromSeconds(1),
            TimeSpan.FromSeconds(1));
    }
    private async Task OnAddTicker(string ticker)
    {
        if (!string.IsNullOrWhiteSpace(ticker) && !userTicker.Contains(ticker, StringComparer.OrdinalIgnoreCase))
        {
            userTicker.Add(ticker);
            string query = "?";
            foreach (var userTicker in userTicker)
            {
                query += $"tickers={userTicker}&";
            }
            await FetchCryptoDataAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnRemoveTicker(string tickerToRemove)
    {
        if (userTicker.Remove(tickerToRemove))
        {
            await FetchCryptoDataAsync();
            StateHasChanged();
        }
    }
    private async Task LoadDataAsync()
    {
        if (userTicker.Count == 0)
        {
            cryptocurrencies = Array.Empty<Cryptocurrency>();
            selectedTicker = null; // безопасно сбрасываем выбор
            data = Array.Empty<double>();
            return;
        }

        if (selectedTicker != null && cryptocurrencies.Length != 0)
        {
            var crypto = cryptocurrencies.FirstOrDefault(x => x.id == selectedTicker);
            if (crypto == null)
            {
                selectedTicker = cryptocurrencies.Length > 0 ? cryptocurrencies[0].id : (Guid?)null;
                crypto = selectedTicker != null ? cryptocurrencies.FirstOrDefault(x => x.id == selectedTicker) : null;
            }

            if (crypto != null && !string.IsNullOrEmpty(crypto.ticker))
            {
                var value = await client.GetFromJsonAsync<double>($"/Cryptocurrency/{Uri.EscapeDataString(crypto.ticker)}");
                var list = data?.ToList() ?? new List<double>();
                list.Add(value);
                data = list.ToArray();
            }
        }
    }
    private async Task FetchCryptoDataAsync()
    {
        if (userTicker.Count == 0)
        {
            cryptocurrencies = Array.Empty<Cryptocurrency>();
            return;
        }

        string query = "?" + string.Join("&", userTicker.Select(t => $"tickers=" + Uri.EscapeDataString(t)));
        var result = await client.GetFromJsonAsync<Cryptocurrency[]>($"/cryptocurrency{query}");
        cryptocurrencies = result ?? Array.Empty<Cryptocurrency>();
    }

    private async Task RefreshDataAsync()
    {
        if (userTicker.Count > 0)
        {
            await FetchCryptoDataAsync();
        }
        await InvokeAsync(StateHasChanged);
        Console.WriteLine("Обновление...");
    }
}