@page "/"
@using System.Threading.Tasks
@using cryptovalutchik.Components.Blocks;
@using cryptovalutchik.Components.Types;
@inject HttpClient client;
<PageTitle>Cryptovalutchik</PageTitle>
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crypto Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link rel="stylesheet" href="../Components/Pages/Home.razor.css" />
</head>

<body>
    <div class="container">
        <TickerFilter Tickers="tickers" OnAddTicker="OnAddTicker"/>
        <CryptoList Cryptocurrencies="cryptocurrencies" OnRemoveCrypto="OnRemoveTicker"/>
        <ChartList Cryptocurrencies="cryptocurrencies"/>
    </div>
</body>
</html>

@code{
    private string[] tickers=[];
    private List<string> userTicker = [];
    private Cryptocurrency[] cryptocurrencies=[];
    private Timer? _timer;
    protected override async Task OnInitializedAsync()
    {
        tickers = await client.GetFromJsonAsync<string[]>("/cryptocurrency/tickers");
        _timer = new Timer(async _ => await RefreshDataAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(3));
    }
    private async Task OnAddTicker(string ticker)
    {
        if (!string.IsNullOrWhiteSpace(ticker) && !userTicker.Contains(ticker, StringComparer.OrdinalIgnoreCase))
        {
            userTicker.Add(ticker);
            await FetchCryptoDataAsync();
            StateHasChanged();
        }
    }

    private async Task OnRemoveTicker(string tickerToRemove)
    {
        if (userTicker.Remove(tickerToRemove))
        {
            await FetchCryptoDataAsync();
            StateHasChanged();
            Console.Write("sssss");
        }
    }

    private async Task FetchCryptoDataAsync()
    {
        if (userTicker.Count == 0)
        {
            cryptocurrencies = Array.Empty<Cryptocurrency>();
            return;
        }

        string query = "?" + string.Join("&", userTicker.Select(t => $"tickers=" + Uri.EscapeDataString(t)));
        var result = await client.GetFromJsonAsync<Cryptocurrency[]>($"/cryptocurrency{query}");
        cryptocurrencies = result ?? Array.Empty<Cryptocurrency>();
    }

    private async Task RefreshDataAsync()
    {
        if (userTicker.Count > 0)
        {
            await FetchCryptoDataAsync();
        }
        await InvokeAsync(StateHasChanged);
        Console.WriteLine("Обновление...");
    }
}